{"version":3,"file":"static/js/269.81cd73d0.chunk.js","mappings":"+MAKaA,EAAU,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAGxB,OAFAC,EAAAA,EAAAA,IAAMD,IAGJ,0BACE,SAAC,KAAD,KAGL,C,2MCXYE,EAAWC,EAAAA,GAAAA,GAAH,6OAWRC,EAAWD,EAAAA,GAAAA,GAAH,0D,SCqDrB,EAzDa,WACX,OAAgCE,EAAAA,EAAAA,WAAS,GAAzC,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAAwCF,EAAAA,EAAAA,UAAS,MAAjD,eAAOG,EAAP,KAAqBC,EAArB,KACA,GAAwBJ,EAAAA,EAAAA,UAAS,IAAjC,eAAOK,EAAP,KAAaC,EAAb,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,QAoBR,OAjBAE,EAAAA,EAAAA,YAAU,WAAM,wCACd,8FACQC,EAAAA,EAAAA,IAAA,6CAEoCH,EAFpC,qEAIHI,MAAK,SAAAC,GACJN,EAAQM,EAAIC,KAAKR,KAClB,IACAS,OAAM,SAAAC,GACLX,EAAgBW,EACjB,IACAC,QAAQd,GAAW,IAXxB,4CADc,uBAAC,WAAD,wBAcde,EACD,GAAE,CAACV,KAGF,gCACGN,IACC,SAAC,IAAD,WACE,SAACiB,EAAA,EAAD,OAGJ,SAACrB,EAAD,UACmB,IAAhBQ,EAAKc,QACJ,6EAEAd,EAAKe,KAAI,SAAAC,GAAI,OACX,UAACtB,EAAD,WACGsB,EAAKC,cACJ,gBAAKC,IAAG,UAjCA,uCAiCA,OAAqBF,EAAKC,cAAgBE,IAAI,MAEtD,gBACED,IAAI,qFACJC,IAAI,MAIR,uBAAIH,EAAKI,mBAVIC,EAAAA,EAAAA,IAAO,GADX,MAgBhBvB,IAAgB,SAACT,EAAA,EAAD,CAASC,QAASQ,MAGxC,C,wDC/DM,IAkBIuB,EAAS,eAACC,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACC,EAAIC,GAWvD,OARED,IAFFC,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["components/Toaster.jsx","components/cast/Cast.styles.jsx","components/cast/Cast.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import React from 'react';\n\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nexport const Toaster = ({ message }) => {\n  toast(message);\n\n  return (\n    <div>\n      <ToastContainer />\n    </div>\n  );\n};\n","import styled from 'styled-components';\n\nexport const CastList = styled.ul`\n  padding: 15px;\n  box-shadow: 6px 0px 6px 0px rgba(0, 0, 0, 0.75);\n  border-left: 1px solid gray;\n  border-top: 1px solid gray;\n  display: flex;\n  gap: 15px;\n  flex-wrap: wrap;\n  justify-content: center;\n`;\n\nexport const CastItem = styled.li`\n  width: 100px;\n  height: 100%;\n`;\n","import { useParams } from 'react-router-dom';\nimport axios from 'axios';\nimport { useEffect, useState } from 'react';\nimport { LoaderBox } from '../loader/Loader.styles';\nimport Loader from '../loader/Loader';\nimport { Toaster } from '../Toaster';\nimport { nanoid } from 'nanoid';\nimport { CastList, CastItem } from '../cast/Cast.styles';\n\nconst Cast = () => {\n  const [isLoading, setLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(null);\n  const [cast, setCast] = useState([]);\n\n  const { movieId } = useParams();\n  const mainPhotoPath = 'https://image.tmdb.org/t/p/original';\n\n  useEffect(() => {\n    async function Response() {\n      await axios\n        .get(\n          `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=6c2e7884d8582c075e4f6889ea94f7ad&language=en-US`\n        )\n        .then(obj => {\n          setCast(obj.data.cast);\n        })\n        .catch(error => {\n          setErrorMessage(error);\n        })\n        .finally(setLoading(false));\n    }\n    Response();\n  }, [movieId]);\n\n  return (\n    <>\n      {isLoading && (\n        <LoaderBox>\n          <Loader />\n        </LoaderBox>\n      )}\n      <CastList>\n        {cast.length === 0 ? (\n          <h3>Sorry. There is no information about the cast...</h3>\n        ) : (\n          cast.map(item => (\n            <CastItem key={nanoid(8)}>\n              {item.profile_path ? (\n                <img src={`${mainPhotoPath}${item.profile_path}`} alt=\"\" />\n              ) : (\n                <img\n                  src=\"https://upload.wikimedia.org/wikipedia/commons/2/2b/No-Photo-Available-240x300.jpg\"\n                  alt=\"\"\n                />\n              )}\n\n              <p>{item.original_name}</p>\n            </CastItem>\n          ))\n        )}\n      </CastList>\n      {errorMessage && <Toaster message={errorMessage} />}\n    </>\n  );\n};\n\nexport default Cast;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["Toaster","message","toast","CastList","styled","CastItem","useState","isLoading","setLoading","errorMessage","setErrorMessage","cast","setCast","movieId","useParams","useEffect","axios","then","obj","data","catch","error","finally","Response","Loader","length","map","item","profile_path","src","alt","original_name","nanoid","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase"],"sourceRoot":""}